generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contact_person {
  contact_person_id String  @id @default(uuid())
  first_name        String
  last_name         String
  phone_number      String?
  email             String

  customer    customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String   @unique
}

model address {
  address_id       String  @id @default(uuid())
  street           String
  street_number    String
  apartment_number String?
  city             String
  postal_code      String
  post             String
  country          String

  customer_id String   @unique
  customer    customer @relation(fields: [customer_id], references: [customer_id])
}

model customer {
  customer_id    String          @id @default(uuid())
  company_name   String          @db.VarChar(255)
  short_name     String          @db.VarChar(50)
  vat_no         String          @unique @db.VarChar(12)
  address        address?
  contact_person contact_person?
  note           String?
  payment_term   String
  payment_type   String
  is_company     Boolean
}

model user_account {
  user_id                    String         @id @default(uuid())
  email                      String         @unique @db.VarChar(50)
  password                   String         @db.VarChar(255)
  active                     Boolean        @default(false)
  activate_token             String         @unique @db.VarChar(255)
  activate_token_expire_date BigInt
  created_at                 DateTime       @default(now()) @db.Timestamp(6)
  updated_at                 DateTime       @default(now()) @db.Timestamp(6)
  resetTokens                ResetToken[]
  shopping_cart              shopping_cart?
}

model product {
  product_id               String     @id @default(uuid())
  product_name             String
  product_description      String
  product_code             String
  categories               String[]
  price                    Decimal
  stock_amount             Int
  producer                 String
  brand_name               String
  color                    String
  package                  Decimal
  pallete                  Decimal
  size_unit                String
  height                   Int
  width                    Int
  thickness                Decimal
  weight                   Decimal
  weight_unit              String
  material                 String
  finish                   String
  slip_resistance_DIN51097 String[]
  slip_resistance_DIN51130 String
  created_date             DateTime
  updated_date             DateTime
  is_active                Boolean
  images                   String[]
  cart_item                cart_item?
}

model shopping_cart {
  shopping_cart_id String        @id @default(uuid())
  user_id          String        @unique
  user             user_account? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  cart_items       cart_item[]
}

model cart_item {
  cart_item_id     String   @id @default(uuid())
  shopping_cart_id String
  product_id       String   @unique
  quantity         Decimal
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)

  product       product       @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  shopping_cart shopping_cart @relation(fields: [shopping_cart_id], references: [shopping_cart_id], onDelete: Cascade, onUpdate: Cascade)
}

model ResetToken {
  reset_token_id    String        @id @default(uuid())
  token             String        @unique @db.VarChar(255)
  token_expire_date BigInt
  user_id           String        @unique
  user              user_account? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}
